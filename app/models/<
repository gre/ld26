package models

import akka.actor._
import scala.concurrent._
import scala.concurrent.duration._

import play.api._
import play.api.libs.json._
import play.api.libs.iteratee._
import play.api.libs.concurrent._

import akka.util.Timeout
import akka.pattern.ask

import play.api.Play.current
import play.api.libs.concurrent.Execution.Implicits._

/*
object Robot {
  
  def apply(chatRoom: ActorRef) {
    
    // Create an Iteratee that logs all messages to the console.
    val loggerIteratee = Iteratee.foreach[JsValue](event => Logger("robot").info(event.toString))
    
    implicit val timeout = Timeout(1 second)
    // Make the robot join the room
    chatRoom ? (Join("Robot")) map {
      case Connected(robotChannel) => 
        // Apply this Enumerator on the logger.
        robotChannel |>> loggerIteratee
    }
    
    // Make the robot talk every 30 seconds
    Akka.system.scheduler.schedule(
      30 seconds,
      30 seconds,
      chatRoom,
      Talk("Robot", "I'm still alive")
    )
  }
  
}
*/

object Game {
  implicit val timeout = Timeout(1 second)
  
  val default = {
    val gameActor = Akka.system.actorOf(Props[Game])
    gameActor
  }

  def join(username:String): Future[(Iteratee[JsValue,_],Enumerator[JsValue])] = {

    (default ? Join(username)).map {
      
      case Connected(enumerator) => 
      
        // Create an Iteratee to consume the feed
        val iteratee = Iteratee.foreach[JsValue] { event =>

          println(event);
          // default ! Talk(username, (event \ "text").as[String])
        }.mapDone { _ =>
          default ! Quit(username)
        }

        (iteratee,enumerator)
        
      case CannotConnect(error) => 
      
        // Connection error

        // A finished Iteratee sending EOF
        val iteratee = Done[JsValue,Unit]((),Input.EOF)

        // Send an error and close the socket
        val enumerator =  Enumerator[JsValue](JsObject(Seq("error" -> JsString(error)))).andThen(Enumerator.enumInput(Input.EOF))
        
        (iteratee, enumerator)
         
    }

  }
  
}

class Player (username: String) extends Actor {
  var x = 0L
  var y = 0L

  def receive = {
    case InitPlayer(x, y) => {
      this.x = x
      this.y = y
      sender ! NewPosition(username, x, y)
    }
    case Move(x, y) => {
      this.x = x
      this.y = y
      sender ! NewPosition(username, x, y)
    }
  }
}

case class InitPlayer (x: Long, y: Long)
case class Move (x: Long, y: Long)
case class NewPosition (username: String, x: Long, y: Long)

class Game extends Actor {
  
  var members = Map.empty[String, ActorRef]
  val (gameEnumerator, gameChannel) = Concurrent.broadcast[JsValue]

  def receive = {
    
    case Join(username) => {
      if(members.contains(username)) {
        sender ! CannotConnect("username_exists")
      } else {
        val player = Akka.system.actorOf(Props(new Player(username)))
        members = members + (username -> player)
        sender ! Connected(gameEnumerator)
        self ! NotifyJoin(username)

        player ! InitPlayer(0, 0)
      }
    }

    case NewPosition(username: String, x: Long, y: Long) => {
      notifyAll("position", username, Json.obj("x" -> JsNumber(x), "y" -> JsNumber(y)))
    }

    case NotifyJoin(username) => {
      notifyAll("quit", username, JsString(username))
    }
    
    case Talk(username, text) => {
      notifyAll("talk", username, JsString(text))
    }
    
    case Quit(username) => {
      members = members - username
      notifyAll("quit", username, JsString(username))
    }
    
  }
  
  def notifyAll(kind: String, user: String, message: JsValue) {
    val msg = JsObject(
      Seq(
        "kind" -> JsString(kind),
        "user" -> JsString(user),
        "message" -> message
      )
    )
    gameChannel.push(msg)
  }
  
}

case class Join(username: String)
case class Quit(username: String)
case class Talk(username: String, text: String)
case class NotifyJoin(username: String)

case class Connected(enumerator:Enumerator[JsValue])
case class CannotConnect(msg: String)
